name: goldendict

on:
  push:
    paths:
      - 'goldendict/Dockerfile'
      - 'goldendict/src/**'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force Build?'
        required: true
        type: boolean
        default: false
  schedule:
    - cron: '0 0 * * *'

jobs:
  job1:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: set imageName
        run: echo imageName=goldendict >>"$GITHUB_ENV"

      - name: get version and download url
        env:
          FORCE_BUILD: ${{ inputs.force_build }}
        run: |
          set -e
          json=$(curl -sLRJ "https://api.github.com/repos/xiaoyifang/goldendict/releases?per_page=1")
          version="$(echo "$json" | jq -r ".[0].tag_name")"
          downloadUrl="$(echo "$json" | jq -r ".[0].assets[].browser_download_url" | grep "\.AppImage" | tail -n 1)"
          TAGS=$(curl -sLRJ 'https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ env.imageName }}/tags?page_size=1024' | jq -r '."results"[]["name"]')
          if [ '${{ github.event_name }}' != 'push' ] && [ \( '${{ github.event_name }}' = 'workflow_dispatch' \) -a \( "$FORCE_BUILD" = 'false' \) ] && echo "$TAGS" | grep -q "$version"; then
            echo "skip build because $version already exists"
            exit 0
          fi
          {
            echo version="$version"
            echo downloadUrl="$downloadUrl"
          } >>"$GITHUB_ENV"

      - name: Set up Docker Buildx
        if: ${{ env.version != '' }}
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: Login to DockerHub
        if: ${{ env.version != '' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        if: ${{ env.version != '' }}
        uses: docker/build-push-action@v2
        with:
          context: ./goldendict
          file: ./goldendict/Dockerfile
          platforms: linux/amd64
          build-args: |
            downloadUrl=${{ env.downloadUrl }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.imageName }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.imageName }}:${{ env.version }}

      - name: Docker Hub Description
        if: ${{ env.version != '' }}
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.DOCKER_USERNAME }}/${{ env.imageName }}
          short-description: GoldenDict VNC ç‰ˆ
          readme-filepath: ./goldendict/README.md
